// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

contract Voting {
    // Define the Proposal struct
    struct Proposal {
        address target;          // Target address of the proposal
        bytes data;              // Data to send when the proposal is executed
        uint256 yesCount;        // Number of yes votes
        uint256 noCount;         // Number of no votes
        bool executed;           // Tracks whether the proposal has been executed
        mapping(address => bool) hasVoted; // Tracks if an address has voted
        mapping(address => bool) votes;    // Tracks the vote of each address (true = yes, false = no)
    }

    // Public array to store proposals
    Proposal[] public proposals;

    // Mapping to track allowed members
    mapping(address => bool) public isMember;

    // Define the events
    event ProposalCreated(uint256 proposalId);
    event VoteCast(uint256 proposalId, address voter);
    event ProposalExecuted(uint256 proposalId);

    // Constructor to initialize allowed members
    constructor(address[] memory _members) {
        // Add the deployer to the members list
        isMember[msg.sender] = true;

        // Add each address in the provided array to the members list
        for (uint256 i = 0; i < _members.length; i++) {
            isMember[_members[i]] = true;
        }
    }

    // Modifier to restrict access to members only
    modifier onlyMembers() {
        require(isMember[msg.sender], "You are not allowed to perform this action!");
        _;
    }

    // External function to create a new proposal
    function newProposal(address _target, bytes memory _data) external onlyMembers {
        proposals.push();
        Proposal storage proposal = proposals[proposals.length - 1];
        proposal.target = _target;
        proposal.data = _data;
        proposal.executed = false;

        // Emit the ProposalCreated event with the ID of the new proposal
        emit ProposalCreated(proposals.length - 1);
    }

    // External function to cast or change a vote on a proposal
    function castVote(uint256 proposalId, bool support) external onlyMembers {
        require(proposalId < proposals.length, "Invalid proposal ID!");

        // Reference the specific proposal by its ID
        Proposal storage proposal = proposals[proposalId];
        require(!proposal.executed, "Proposal has already been executed!");

        // Check if the voter has already voted
        if (proposal.hasVoted[msg.sender]) {
            // If the voter already voted, adjust the vote counts based on their previous choice
            if (proposal.votes[msg.sender] && !support) {
                // Changing from yes to no
                proposal.yesCount -= 1;
                proposal.noCount += 1;
            } else if (!proposal.votes[msg.sender] && support) {
                // Changing from no to yes
                proposal.noCount -= 1;
                proposal.yesCount += 1;
            }
        } else {
            // If the voter hasn't voted yet, increment the relevant vote count
            if (support) {
                proposal.yesCount += 1;
            } else {
                proposal.noCount += 1;
            }
            // Mark the voter as having voted
            proposal.hasVoted[msg.sender] = true;
        }

        // Update the voter's choice in the mapping
        proposal.votes[msg.sender] = support;

        // Emit the VoteCast event with the proposal ID and voter's address
        emit VoteCast(proposalId, msg.sender);

        // Check if the proposal meets the execution threshold
        if (proposal.yesCount >= 10 && !proposal.executed) {
            executeProposal(proposalId);
        }
    }

    // Internal function to execute a proposal
    function executeProposal(uint256 proposalId) internal {
        Proposal storage proposal = proposals[proposalId];
        require(!proposal.executed, "Proposal has already been executed!");
        require(proposal.yesCount >= 10, "Not enough yes votes to execute!");

        // Execute the proposal using the call syntax
        (bool success, ) = proposal.target.call(proposal.data);
        require(success, "Proposal execution failed!");

        // Mark the proposal as executed
        proposal.executed = true;

        // Emit the ProposalExecuted event with the ID of the executed proposal
        emit ProposalExecuted(proposalId);
    }
}

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

contract Voting {
    // Define the Proposal struct
    struct Proposal {
        address target;      // Target address of the proposal
        bytes data;      // data to send when the proposal is executed
        uint256 yesCount;    // Number of yes count
        uint256 noCount;     // Number of no count
    }

    // Public array to store proposals
    Proposal[] public proposals;

    // External function to create a new proposal
    function newProposal(address _target, bytes memory _data) external {
        Proposal memory proposal = Proposal({
            target: _target,
            data: _data,
            yesCount: 0,
            noCount: 0
        });

        proposals.push(proposal);
    }

    // External function to cast a vote on a proposal
    function castVote(uint256 proposalId, bool support) external {
        require(proposalId < proposals.length, "Invalid proposal ID!");

        // Reference the specific proposal by its ID
        Proposal storage proposal = proposals[proposalId];

        // Update vote counts based on the 'support' boolean
        if (support) {
            proposal.yesCount += 1; // Increment yesCount if support is true
        } else {
            proposal.noCount += 1; // Increment noCount if support is false
        }
    }
}

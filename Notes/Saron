What I’ve Learned About Solidity and Smart Contract Development

Throughout the exercises, I have gained hands-on experience with several key Solidity concepts and how to use them in smart contract development. Here's a summary of what I've learned:

1. Structs and Enum Usage
Structs: In Solidity, structs are custom data types that allow grouping multiple variables of different types into a single unit. For example, I created a Vote struct to group a choice (an enum of Yes or No) and a voter (an address) to represent votes in a contract.
Enums: Enums in Solidity provide a way to define custom data types with a set of predefined values. For example, I used an enum Choices { Yes, No } to represent voting options in a voting contract.
2. Creating and Managing Votes
Mapping for Voting: I created a system to manage votes by mapping an address to a boolean to check whether someone has already voted. This allowed me to ensure that a voter can only vote once.
Voting and Changing Votes: I implemented a createVote function that allows users to cast their votes and a changeVote function that enables users to update their vote if they’ve already voted. I learned how to check for existing votes and handle updates efficiently in smart contracts.
3. Mappings
Mapping Basics: Mappings in Solidity are used to store data in key-value pairs, where the key can be any type (e.g., address, uint), and the value can be any valid Solidity type. I learned how to create mappings for various use cases, such as mapping an address to a bool to track membership status.
Public Mappings and Getter Functions: I learned that if a mapping is declared public, Solidity automatically creates a getter function to retrieve the value associated with a given key. This allows easy retrieval of data from the mapping without the need for manual getter functions.
Modifying Mappings: I also learned how to modify values in a mapping. For instance, to add a member, I used a mapping to store the address of a user and updated the corresponding value to true (indicating the user is a member).
4. Advanced Mapping Use Cases
Mapping Structs: I experimented with more advanced mapping use cases by mapping a uint ID to a struct in a marketplace. The struct represented an item with properties like owner, forSale, and price. This allowed me to update the item’s owner when it was purchased.
Mapping to User Structs: In a token system, I created a User struct to store a user’s balance and active status. A mapping from an address to a User struct allowed me to associate users with their respective data. I also implemented a function createUser that ensures a new user is created only if they don’t already exist, giving them an initial balance of 100 tokens.
5. Functions and Security
Reverting Transactions: I learned to use the require statement to enforce conditions and revert transactions if those conditions are not met. For example, in the changeVote function, I used require to ensure that a user can only change their vote if they had already voted.
Function Visibility: I explored different function visibility levels (external, public, view) and learned how to properly manage access control and data retrieval using visibility modifiers.
6. Contract Design and Gas Optimization
Gas Efficiency: I learned that mappings are more gas-efficient than arrays for lookup and modification, especially when dealing with large datasets. This is because mappings don’t require iteration over elements, unlike arrays.
Contract Structure: I worked on structuring contracts with multiple functions to manage user interactions, such as voting, adding members, and creating users. I understood the importance of good contract design to ensure that contracts are both functional and efficient.
7. Practical Applications
Voting Systems: I created a simple voting system where users could vote once and change their vote later. This system showed me how to manage user actions in smart contracts and enforce rules like allowing only one vote per user.
Membership and Token Systems: I built a basic membership and token distribution system, where users could join as members and be assigned tokens. This taught me how to map users to struct data and handle active user checks.
Marketplace Contracts: By working with a marketplace example, I learned how to represent items in a marketplace using structs and how to update item ownership based on user actions.
8. Conclusion
Through these exercises, I’ve gained practical experience in implementing key Solidity features such as mappings, structs, enums, and functions. I now understand how to use these features to build secure, efficient, and user-friendly decentralized applications on the Ethereum blockchain.
